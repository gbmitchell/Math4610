#pragma once
void smaceps(float *seps, int *ipow);
void dmaceps(double *seps, int *ipow);
double eabs(double v, double u);
double erel(double v, double u);
double fnct1(double x);
double fnct2(double x);
double fnct3(double x);
double fnct4(double x);
double fnct5(double x);
double fnct6(double x);
double fnct7(double x);
double fnct8(double x);
double fnct9(double x);
int bisMaxItr(double a, double b, double tol);
double derivative(double(*f)(double), double x, double h, double tol, int maxItr);
double expderivative(double(*f)(double), double x, double h, double tol, int maxItr, double expder);
double secant(double(*f)(double), double xa, double xb, double tol, int maxItr);
double expsecant(double(*f)(double), double xa, double xb, double tol, int maxItr, double exproot);
double newton(double(*f)(double), double(*fp)(double), double x, double tol, int maxItr);
double expnewton(double(*f)(double), double(*fp)(double), double x, double tol, int maxItr, double exproot);
double bisection(double(*f)(double), double a, double b, double tol, int maxItr);
double expbisection(double(*f)(double), double a, double b, double tol, int maxItr, double exproot);
double fixed1(double(*f)(double), double xn, double tol, int maxItr, double exproot);
double fixed2(double(*f)(double), double xn, double tol, int maxItr, double exproot);
double expNewtonHybrid(double(*f)(double), double(*fp)(double), double a, double b, double tol, int maxItr, double exproot);
double expSecantHybrid(double(*f)(double), double a, double b, double tol, int maxItr, double exproot);
void vectorAdd(double up[3], double vp[3], double ap[3], int len);
void vectorSub(double up[3], double vp[3], double ap[3], int len);
void vectorScale(double up[3], double ap[3], double scale, int len);
double vectorInner(double up[3], double vp[3], int len);
void vectorCross(double up[3], double vp[3], double ap[3], int len);
double vectorNormL1(double up[3], int len);
double vectorNormL2(double up[3], int len);
double vectorNormInfinity(double up[3], int len);
double vectorErrorAbsoluteL1(double xp[3], double yp[3], int len);
double vectorErrorRelativeL1(double xp[3], double yp[3], int len);
double vectorErrorAbsoluteL2(double xp[3], double yp[3], int len);
double vectorErrorRelativeL2(double xp[3], double yp[3], int len);
double vectorErrorAbsoluteInfinity(double xp[3], double yp[3], int len);
double vectorErrorRelativeInfinity(double xp[3], double yp[3], int len);
void matrixAdd(double A[3][3], double B[3][3], double C[3][3], int m, int n);
void matrixSub(double A[3][3], double B[3][3], double C[3][3], int m, int n);
void vectorXmatrix(double A[3][3], double v[3], double u[3], int m, int n);
void parallelVectorXmatrix(double A[3][3], double v[3], double u[3], int m, int n);
void matrixXmatrix(double A[3][3], double B[3][3], double C[3][3], int m, int n);
void parallelMatrixXmatrix(double A[3][3], double B[3][3], double C[3][3], int m, int n);
double traceMatrix(double A[3][3], int m);
void scaleMatrix(double A[3][3], double C[3][3], double s, int m, int n);
void transposeMatrix(double A[3][3], double C[3][3], int m, int n);
double determinantMatrix(double A[3][3], int m);
void KroneckerMatrix(double A[3][3], double B[3][3], double K[9][9], int m, int n);
double matrixNormL1(double a[3][3], int len);
double matrixNormFrobenious(double a[3][3], int len);
double matrixNormInfinity(double a[3][3], int len);
void outerProductMatrix(double x[3], double y[3], double C[3][3], int m, int n);
void unitOrthog(double v1[3], double v2[3], double u1[3], double u2[3], int len);